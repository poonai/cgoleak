// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package sampler

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type samplerAlloc struct {
	Size    uint64
	StackId int64
}

// loadSampler returns the embedded CollectionSpec for sampler.
func loadSampler() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_SamplerBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load sampler: %w", err)
	}

	return spec, err
}

// loadSamplerObjects loads sampler and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*samplerObjects
//	*samplerPrograms
//	*samplerMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadSamplerObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadSampler()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// samplerSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type samplerSpecs struct {
	samplerProgramSpecs
	samplerMapSpecs
}

// samplerSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type samplerProgramSpecs struct {
	FreeEnter   *ebpf.ProgramSpec `ebpf:"free_enter"`
	MallocEnter *ebpf.ProgramSpec `ebpf:"malloc_enter"`
	MallocExit  *ebpf.ProgramSpec `ebpf:"malloc_exit"`
}

// samplerMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type samplerMapSpecs struct {
	AllocSizes  *ebpf.MapSpec `ebpf:"alloc_sizes"`
	Allocs      *ebpf.MapSpec `ebpf:"allocs"`
	Stacks      *ebpf.MapSpec `ebpf:"stacks"`
	TotalAllocs *ebpf.MapSpec `ebpf:"total_allocs"`
}

// samplerObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadSamplerObjects or ebpf.CollectionSpec.LoadAndAssign.
type samplerObjects struct {
	samplerPrograms
	samplerMaps
}

func (o *samplerObjects) Close() error {
	return _SamplerClose(
		&o.samplerPrograms,
		&o.samplerMaps,
	)
}

// samplerMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadSamplerObjects or ebpf.CollectionSpec.LoadAndAssign.
type samplerMaps struct {
	AllocSizes  *ebpf.Map `ebpf:"alloc_sizes"`
	Allocs      *ebpf.Map `ebpf:"allocs"`
	Stacks      *ebpf.Map `ebpf:"stacks"`
	TotalAllocs *ebpf.Map `ebpf:"total_allocs"`
}

func (m *samplerMaps) Close() error {
	return _SamplerClose(
		m.AllocSizes,
		m.Allocs,
		m.Stacks,
		m.TotalAllocs,
	)
}

// samplerPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadSamplerObjects or ebpf.CollectionSpec.LoadAndAssign.
type samplerPrograms struct {
	FreeEnter   *ebpf.Program `ebpf:"free_enter"`
	MallocEnter *ebpf.Program `ebpf:"malloc_enter"`
	MallocExit  *ebpf.Program `ebpf:"malloc_exit"`
}

func (p *samplerPrograms) Close() error {
	return _SamplerClose(
		p.FreeEnter,
		p.MallocEnter,
		p.MallocExit,
	)
}

func _SamplerClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed sampler_x86_bpfel.o
var _SamplerBytes []byte
